{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"examples/find_golds/","title":"Find golds","text":"In\u00a0[2]: Copied! <pre>import pooch\nimport mrcfile\nimport torch\nimport matplotlib.pyplot as plt\n\nfrom torch_peaks.find_peaks import peak_local_max_3d\n\nfrom scipy.ndimage import maximum_filter\n</pre> import pooch import mrcfile import torch import matplotlib.pyplot as plt  from torch_peaks.find_peaks import peak_local_max_3d  from scipy.ndimage import maximum_filter In\u00a0[3]: Copied! <pre>tomo = pooch.retrieve(\"https://ftp.ebi.ac.uk/pub/databases/emdb/structures/EMD-25061/map/emd_25061.map.gz\",known_hash=None)\n</pre>  tomo = pooch.retrieve(\"https://ftp.ebi.ac.uk/pub/databases/emdb/structures/EMD-25061/map/emd_25061.map.gz\",known_hash=None)  In\u00a0[4]: Copied! <pre>with mrcfile.open(tomo, mode='r') as mrc:\n    # print the map header\n    tomo_data = torch.tensor(mrc.data).to(\"cuda:0\")\n</pre> with mrcfile.open(tomo, mode='r') as mrc:     # print the map header     tomo_data = torch.tensor(mrc.data).to(\"cuda:0\")  In\u00a0[5]: Copied! <pre>with torch.no_grad():\n    # Find peaks in the 3D volume\n    peaks = peak_local_max_3d(\n                volume = -1. * tomo_data,\n                threshold_abs=30,\n                min_distance=3,\n            )\n</pre> with torch.no_grad():     # Find peaks in the 3D volume     peaks = peak_local_max_3d(                 volume = -1. * tomo_data,                 threshold_abs=30,                 min_distance=3,             ) In\u00a0[11]: Copied! <pre>fig, [pl1, pl2] = plt.subplots(1, 2, figsize=(6, 4))\ntomo_data = tomo_data.cpu()\npl1.imshow(torch.min(tomo_data, dim=0).values, cmap='gray',interpolation='mitchell', vmin=0, vmax=70)\npeaks = peaks.cpu()\npl2.imshow(torch.min(tomo_data, dim=0).values, cmap='gray',interpolation='mitchell', vmin=0, vmax=70)\npl2.plot(peaks[:, 2], peaks[:, 1], 'r.', markersize=2)\nplt.tight_layout()\nplt.show()\n</pre> fig, [pl1, pl2] = plt.subplots(1, 2, figsize=(6, 4)) tomo_data = tomo_data.cpu() pl1.imshow(torch.min(tomo_data, dim=0).values, cmap='gray',interpolation='mitchell', vmin=0, vmax=70) peaks = peaks.cpu() pl2.imshow(torch.min(tomo_data, dim=0).values, cmap='gray',interpolation='mitchell', vmin=0, vmax=70) pl2.plot(peaks[:, 2], peaks[:, 1], 'r.', markersize=2) plt.tight_layout() plt.show() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/plot_gaussians/","title":"Plot gaussians","text":"In\u00a0[2]: Copied! <pre>from torch_find_peaks.gaussians import Gaussian2D, WarpedGaussian2D\nfrom torch_grid_utils.coordinate_grid import coordinate_grid\nimport matplotlib.pyplot as plt\nimport torch\n\ng1 = Gaussian2D(1.,0., 0., 10., 5.)\n\ngrid = coordinate_grid((100,100), center=torch.tensor([50.,50.]))\n\nim_g1 = g1(grid)[0]\n</pre> from torch_find_peaks.gaussians import Gaussian2D, WarpedGaussian2D from torch_grid_utils.coordinate_grid import coordinate_grid import matplotlib.pyplot as plt import torch  g1 = Gaussian2D(1.,0., 0., 10., 5.)  grid = coordinate_grid((100,100), center=torch.tensor([50.,50.]))  im_g1 = g1(grid)[0] In\u00a0[3]: Copied! <pre>plt.imshow(im_g1.detach().numpy(), cmap='gray')\n</pre> plt.imshow(im_g1.detach().numpy(), cmap='gray') Out[3]: <pre>&lt;matplotlib.image.AxesImage at 0x7f2e5347cf80&gt;</pre> In\u00a0[6]: Copied! <pre>g2 = WarpedGaussian2D(1.,0.,0., 5.0, 5.0, 0.2, 0.)\n</pre> g2 = WarpedGaussian2D(1.,0.,0., 5.0, 5.0, 0.2, 0.) In\u00a0[7]: Copied! <pre>im_g2 = g2(grid)[0]\nplt.imshow(im_g2.detach().numpy(), cmap='gray')\n</pre> im_g2 = g2(grid)[0] plt.imshow(im_g2.detach().numpy(), cmap='gray') Out[7]: <pre>&lt;matplotlib.image.AxesImage at 0x7f2e51be4a10&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"}]}